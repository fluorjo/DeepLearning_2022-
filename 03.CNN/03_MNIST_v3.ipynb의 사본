{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"03_MNIST_v3.ipynb의 사본","provenance":[{"file_id":"1yslA3uakVjrnQ25NdA64TahF7tGDC_yL","timestamp":1653355980433},{"file_id":"1OXhYLeU5TxMI88P_WRJY0Sl2y4EXWpos","timestamp":1653355362063}],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyPrxZJuPxJ0C7XdTk4I3kV/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# MNIST 손글씨 -CNN v3\n","- 2 x conv2d layers\n","- 1 MaxPooling 2D layer\n","- 1 Dropout(0.25) layer\n","- 1 FCN layers\n","- 1 Dropout(0.5) layer\n","- 1 output layers"],"metadata":{"id":"Vjfb1EETd0ZR"}},{"cell_type":"markdown","source":["- 데이터 전처리"],"metadata":{"id":"m38CqMo8fOB2"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","seed=2022\n","np.random.seed(seed)\n","tf.random.set_seed(seed)"],"metadata":{"id":"G23-EBpueKGV","executionInfo":{"status":"ok","timestamp":1653356037328,"user_tz":-540,"elapsed":2018,"user":{"displayName":"조형석","userId":"16389309121080788962"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.datasets import mnist\n","(X_train, y_train), (X_test,y_test) = mnist.load_data()\n","X_train.shape, y_train.shape,X_test.shape,y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pMU7KNRveNYn","executionInfo":{"status":"ok","timestamp":1653356039075,"user_tz":-540,"elapsed":434,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"72a6c34c-8e94-47f1-8640-c74ec8d21297"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]},{"output_type":"execute_result","data":{"text/plain":["((60000, 28, 28), (60000,), (10000, 28, 28), (10000,))"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["#X_train, X_test 정규화 (0~1)\n","#이미지 차원 변경:CNN=2차원을 3차원으로 올려야.\n","\n","X_train = X_train.reshape(-1,28,28,1) / 255.\n","X_test = X_test.reshape(-1,28,28,1) / 255.\n","X_train.shape, X_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JRejQJKreRUQ","executionInfo":{"status":"ok","timestamp":1653356042104,"user_tz":-540,"elapsed":281,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"a466fbd0-49bf-4ff9-c1ea-ac1859631108"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((60000, 28, 28, 1), (10000, 28, 28, 1))"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["#원핫인코딩\n","from tensorflow.keras.utils import to_categorical\n","Y_train = to_categorical(y_train)\n","Y_test=to_categorical(y_test)\n","Y_train.shape,Y_test.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qn4NEq0xeYmO","executionInfo":{"status":"ok","timestamp":1653356043889,"user_tz":-540,"elapsed":284,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"8cebab09-f601-4079-bfdd-f52ddde91eca"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((60000, 10), (10000, 10))"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["- 모델 정의/설정/학습/평가"],"metadata":{"id":"yZ708c1xfHEz"}},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential, load_model\n","from tensorflow.keras.layers import Dense, Conv2D,Flatten, MaxPooling2D, Dropout\n","#flatten - 3차원인 conv2D를 1차원인 dense, fully connected layer로 \n","#넣어야 하기 때문에 차원 축소를 할 때 필요.\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping"],"metadata":{"id":"XTbB75_dfABV","executionInfo":{"status":"ok","timestamp":1653356064368,"user_tz":-540,"elapsed":304,"user":{"displayName":"조형석","userId":"16389309121080788962"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["model =Sequential([\n","                   Conv2D(32, kernel_size=(3,3),input_shape=(28,28,1),activation='relu'),\n","                   Conv2D(64, (3,3), activation='relu'),\n","                   MaxPooling2D(), #= MaxPooling2D(pool_size=(2,2))\n","                   Dropout(0.25),\n","                   Flatten(), #24,24,64에서 1차원 512개의 노드로.\n","                   Dense(512,activation='relu'),\n","                   Dropout(0.5),\n","                   Dense(10,activation='softmax')\n","])\n","model.summary()\n","\n","#18496=32 x 3 x 3 x 64 + 64"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zoN0cw0rfxhj","executionInfo":{"status":"ok","timestamp":1653356106695,"user_tz":-540,"elapsed":3980,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"a6798add-3be1-4dfd-e4cf-905260946a51"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 24, 24, 64)        18496     \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 12, 12, 64)       0         \n"," )                                                               \n","                                                                 \n"," dropout (Dropout)           (None, 12, 12, 64)        0         \n","                                                                 \n"," flatten (Flatten)           (None, 9216)              0         \n","                                                                 \n"," dense (Dense)               (None, 512)               4719104   \n","                                                                 \n"," dropout_1 (Dropout)         (None, 512)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                5130      \n","                                                                 \n","=================================================================\n","Total params: 4,743,050\n","Trainable params: 4,743,050\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model.compile('adam','categorical_crossentropy',['accuracy'])"],"metadata":{"id":"SzOA40s9fzcA","executionInfo":{"status":"ok","timestamp":1653356133754,"user_tz":-540,"elapsed":261,"user":{"displayName":"조형석","userId":"16389309121080788962"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["model_path = 'best-mnist-cnn-v3.h5'\n","mc=ModelCheckpoint(model_path,save_best_only=True,verbose=1)\n","es=EarlyStopping(patience=10)"],"metadata":{"id":"232Z3uCoi4li","executionInfo":{"status":"ok","timestamp":1653356136124,"user_tz":-540,"elapsed":3,"user":{"displayName":"조형석","userId":"16389309121080788962"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["hist=model.fit(X_train,Y_train,validation_split=0.2,\n","                 epochs=100,batch_size=200,verbose=0,\n","                 callbacks=[mc,es])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vSosCZqIll3R","executionInfo":{"status":"ok","timestamp":1653356212493,"user_tz":-540,"elapsed":67713,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"f3d91a32-f0eb-439e-9bda-c0e17dddf7a1"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Epoch 1: val_loss improved from inf to 0.05636, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 2: val_loss improved from 0.05636 to 0.05100, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 3: val_loss improved from 0.05100 to 0.03918, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 4: val_loss improved from 0.03918 to 0.03659, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 5: val_loss improved from 0.03659 to 0.03645, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 6: val_loss improved from 0.03645 to 0.03601, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 7: val_loss improved from 0.03601 to 0.03404, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 8: val_loss did not improve from 0.03404\n","\n","Epoch 9: val_loss improved from 0.03404 to 0.03285, saving model to best-mnist-cnn-v3.h5\n","\n","Epoch 10: val_loss did not improve from 0.03285\n","\n","Epoch 11: val_loss did not improve from 0.03285\n","\n","Epoch 12: val_loss did not improve from 0.03285\n","\n","Epoch 13: val_loss did not improve from 0.03285\n","\n","Epoch 14: val_loss did not improve from 0.03285\n","\n","Epoch 15: val_loss did not improve from 0.03285\n","\n","Epoch 16: val_loss did not improve from 0.03285\n","\n","Epoch 17: val_loss did not improve from 0.03285\n","\n","Epoch 18: val_loss did not improve from 0.03285\n","\n","Epoch 19: val_loss did not improve from 0.03285\n"]}]},{"cell_type":"code","source":["best_model = load_model(model_path)\n","best_model.evaluate(X_test,Y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h88V8enenMoN","executionInfo":{"status":"ok","timestamp":1653356282801,"user_tz":-540,"elapsed":1556,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"6248c9d3-8d30-4e3e-93a6-9400670a228b"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.0270 - accuracy: 0.9918\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.027020180597901344, 0.9918000102043152]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["y_acc=hist.history['accuracy']\n","y_vloss=hist.history['val_loss']\n","xs=np.arange(1, len(y_acc)+1)\n","plt.figure(figsize=(20,8))\n","plt.plot(xs,y_acc,label='train accuracy1')\n","plt.plot(xs,y_vloss,label='val_loss1')\n","plt.legend(),\n","plt.grid(),\n","plt.xlabel('Epoch')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":325},"id":"k78J1QnonUI3","executionInfo":{"status":"ok","timestamp":1653356283352,"user_tz":-540,"elapsed":556,"user":{"displayName":"조형석","userId":"16389309121080788962"}},"outputId":"140ae340-369f-4312-c2bf-d89f0a1b1408"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Epoch')"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"9nfxNiEAnkgQ"},"execution_count":null,"outputs":[]}]}